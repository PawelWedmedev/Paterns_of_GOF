#pragma once
#include<iostream>
using namespace std;

class Singleton
{
private:
	Singleton (){}// закрываем конструкторы
	Singleton(const Singleton &s);// закрываем конструктор копирования
	Singleton & operator = (Singleton &s) {};// закрываем оп присваивания
	static Singleton *ps; // статическое поле одно на любое количество объектов класса
						  // static поле существует независимо от того создан объект класса или нет
						  // сюда запишем наш единственный объект
public:
	static Singleton* GetInstans()// метод статический потому как при вызове у нас нет еще объекта
		//(а все простые не статические методы вызываються от имени объекта класса)
		// мы вызываем его первый раз для создания первого объекта ( также он вызываеться при попытке создания следующих объектов)
	{
		if (!ps)// если ps = NULL то заносим в указатель ps объект нашего класса
			// при следующей попытке создать второй объект указатель уже не равен нулю и идем в else
			ps = new Singleton();// если не NULL заносим в наш указатель объект

		else
			cout << "Instans of the class is alredy created\n";
		return ps;// в любом случае возвращаем ps (инициализированный при первом создании)
	}
	
};
Singleton* Singleton::ps = NULL;	 // инициализируем статическое поле (указатель в нашем случае)
// тип  <> имя класса::<>имя 