#pragma once
#include<iostream>
using namespace std;

// Суть патерна заключаеться в том, что мы задаем последовательность выполнения методов абстрактного класса
// предопределяя интерфейс. Класс содержит постоянные методы (шаблонные) и переопределяемые(virtual).
// Реализация может изменяеться в зависимости от переопределения виртуальных методов, а интерфейс неизменен.

class Base//  абстрактный класс в котором определены 2 типа методов (изминяемые и не изменяемые), а также очередность их вызова
{
protected:
	// стандартные методы которые не требуют реализации в дальнейшем
	void _a()
	{
		cout << " Кот ";
	}
	void _b()
	{
		cout << " съел ";
	}
	void _c()
	{
		cout << " рыбу ";
	}
	// методы которые будем переопределять в дочерних классах
	virtual void _ph1() = 0;
	virtual void _ph2() = 0;
public:
	void Execute() // метод базового класа который стандартизирует последовательность вызовов методов(скелет)
	{
		_a();
		_ph1();
		_b();
		_ph2();
		_c();
	}

};

class One : public Base// реальный класс №1 в котором переопределяем виртуальные методы
{
public:
	virtual void _ph1()
	{
		cout << " Васька ";
	}
	virtual void _ph2()
	{
		cout << " свежую ";
	}
};

class Two : public Base// реальный класс №2 в котором переопределяем виртуальные методы
{
public:
	virtual void _ph1()
	{
		cout << " Мурчик ";
	}
	virtual void _ph2()
	{
		cout << " вчерашнюю жареную ";
	}
};
